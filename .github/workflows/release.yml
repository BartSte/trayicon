name: Release

on:
  push:
    branches:
      - main

env:
  # By setting the VERSION environment variable, the version of the release can
  # be controlled. By pushing a tag with the same name as the VERSION, cmake
  # can use it to set the version of the project. The release should only be
  # created if no release with the same version exists. This can be checked by
  # visiting the corresponding url. We always run the build-release and
  # build-windows-release jobs, so the artifacts are always available for we
  # can check if the build was successful. The created artifacts are only uploaded
  # if a new release is created.
  VERSION: v0.0.0
  QT_INSTALLER_JWT_TOKEN: ${{ secrets.QT_INSTALLER_JWT_TOKEN }}
  QT_VERSION: 6.7.1

jobs:
  # This job is used to push the tag to the repository. This is done before the
  # build-release job, so the version is available for cmake. If the tag already
  # exists, the job will be stopped, which is no problem.
  push-tag:
    runs-on: ubuntu-22.04
    steps:
      - name: Push tag
        run: |
          git tag -a ${{ env.VERSION }} -m "Release ${{ env.VERSION }}" || exit 0
          git push origin ${{ env.VERSION }}

  build-release:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make qt-version.txt
        run: |
          echo $QT_VERSION > qt-version.txt
          mkdir -p 3rdparty/Qt

      - name: Set up cache qt static
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: 3rdparty/Qt
          key: ${{ runner.os }}-qt-${{ hashFiles('qt-version.txt') }}
          restore-keys: |
            ${{ runner.os }}-qt-

      - if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: |
          ./scripts/setup --static

      - if: ${{ steps.cache-qt.outputs.cache-hit == 'true' }}
        name: Install dependencies with cached Qt
        run: |
          ./scripts/setup --no-qt

      - name: Build project
        run: |
          ./scripts/configure
          cmake --build ./build --target package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-tarball
          path: ./build/*.tar.gz

  build-windows-release:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make qt-version.txt
        run: |
          echo $QT_VERSION > qt-version.txt
          mkdir -p 3rdparty/Qt

      - name: Set up cache qt static
        id: cache-qt-window
        uses: actions/cache@v3
        with:
          path: 3rdparty/Qt
          key: ${{ runner.os }}-qt-${{ hashFiles('qt-version.txt') }}
          restore-keys: |
            ${{ runner.os }}-qt-

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - if: ${{ steps.cache-qt-windows.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: |
          .\scripts\setup.ps1 --static

      - name: Build project
        run: |
          .\scripts\configure.ps1
          cmake --build ./build --config Release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-standalone-exe
          path: .\build\app\*.exe

  # This job is used to check if a release with the same version already
  # exists. If the release exists, the output exists is set to true, otherwise
  # it is set to false.
  check-release:
    runs-on: ubuntu-latest
    steps:
      - name: Get the release by tag
        id: get_release
        run: |
          release_url=$(curl -s https://api.github.com/repos/BartSte/trayicon/releases/tags/Release%200.0.0 | jq -r '.url')
          if [ "$release_url" == "null" ]; then
            echo "Release not found."
            echo "::set-output name=exists::false"
          else
            echo "Release found: $release_url"
            echo "::set-output name=exists::true"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Only create a release if the check-release job has found that no release
  # with the same version exists. The artifacts are downloaded from the build
  # jobs and uploaded to the release.
  make-release:
    needs: [build-release, build-windows-release]
    runs-on: ubuntu-22.04
    if: needs.check-release.outputs.exists == 'false'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            linux-tarball/*.tar.gz
            windows-standalone-exe/*.exe
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            Release ${{ env.VERSION }}
            - [Changelog](https://github.com/BartSte/trayicon/CHANGELOG.md)
