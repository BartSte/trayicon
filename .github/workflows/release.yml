name: Release

on:
  push:
    branches:
      - main

env:
  # By setting the VERSION environment variable, the version of the release can be controlled.
  VERSION: v0.0.0
  QT_INSTALLER_JWT_TOKEN: ${{ secrets.QT_INSTALLER_JWT_TOKEN }}
  QT_VERSION: 6.7.1

jobs:
  build-release:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make qt-version.txt
        run: |
          echo $QT_VERSION > qt-version.txt
          mkdir -p 3rdparty/Qt

      - name: Set up cache qt static
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: 3rdparty/Qt
          key: ${{ runner.os }}-qt-${{ hashFiles('qt-version.txt') }}
          restore-keys: |
            ${{ runner.os }}-qt-

      - if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: |
          ./scripts/setup --static

      - if: ${{ steps.cache-qt.outputs.cache-hit == 'true' }}
        name: Install dependencies with cached Qt
        run: |
          ./scripts/setup --no-qt

      - name: Build project
        run: |
          ./scripts/configure
          cmake --build ./build --target package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-tarball
          path: ./build/*.tar.gz

  build-windows-release:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Make qt-version.txt
        run: |
          echo $QT_VERSION > qt-version.txt
          mkdir -p 3rdparty/Qt

      - name: Set up cache qt static
        id: cache-qt-window
        uses: actions/cache@v3
        with:
          path: 3rdparty/Qt
          key: ${{ runner.os }}-qt-${{ hashFiles('qt-version.txt') }}
          restore-keys: ${{ runner.os }}-qt-

      - if: ${{ steps.cache-qt-windows.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: |
          .\scripts\setup.ps1 --static

      - name: Build project
        run: |
          .\scripts\configure.ps1
          cmake --build ./build --config Release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-standalone-exe
          path: .\build\app\*.exe

  make-release:
    needs: [build-release, build-windows-release]
    runs-on: ubuntu-22.04

    steps:
      # TODO: Only build the release if no tag exists that is the same as VERSION
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            linux-tarball/*.tar.gz
            windows-standalone-exe/*.exe
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            Release ${{ env.VERSION }}
            - [Changelog](https://github.com/BartSte/trayicon/CHANGELOG.md)
