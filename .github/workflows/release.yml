name: Release

on:
  push:
    branches:
      - main

env:
  QT_INSTALLER_JWT_TOKEN: ${{ secrets.QT_INSTALLER_JWT_TOKEN }}
  QT_VERSION: 6.7.1
  VERSION: 0.0.0

jobs:
  check-tag:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if tag exists
        run: |
          git fetch --tags
          if git rev-parse v${{ env.VERSION }} >/dev/null 2>&1; then
            echo "Tag v${{ env.VERSION }} already exists"
            exit 1
          fi

  build-release:
    needs: check-tag
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make qt-version.txt
        run: |
          echo $QT_VERSION > qt-version.txt
          mkdir -p 3rdparty/Qt

      - name: Set up cache qt static
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: 3rdparty/Qt
          key: ${{ runner.os }}-qt-${{ hashFiles('qt-version.txt') }}
          restore-keys: |
            ${{ runner.os }}-qt-

      - if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: |
          ./scripts/setup --static

      - name: Install dependencies with cached Qt
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          ./scripts/setup --no-qt

      - name: Build project
        run: |
          ./scripts/configure
          cmake --build ./build --target package

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-tarball
          files: ./build/*.tar.gz

  build-windows-release:
    needs: check-tag
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Make qt-version.txt
        run: |
          echo $QT_VERSION > qt-version.txt
          mkdir -p 3rdparty/Qt

      - name: Set up cache qt static
        id: cache-qt-window
        uses: actions/cache@v3
        with:
          path: 3rdparty/Qt
          key: ${{ runner.os }}-qt-${{ hashFiles('qt-version.txt') }}
          restore-keys: ${{ runner.os }}-qt-

      - if: ${{ steps.cache-qt-windows.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: |
          .\scripts\setup.ps1 --static

      - name: Build project
        run: |
          .\scripts\configure.ps1
          cmake --build ./build --config Release

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-standalone-exe
          files: .\build\app\*.exe

  make-release:
    needs: [check-tag, build-release, build-windows-release]
    runs-on: ubuntu-22.04

    steps:
      - name: Download artifacts linux
        uses: actions/download-artifact@v3
        with:
          name: linux-tarball
          path: .

      - name: Download artifacts windows
        uses: actions/download-artifact@v3
        with:
          name: windows-standalone-exe
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.tar.gz
          asset_name: trayicon-${{ env.VERSION }}-linux-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.exe
          asset_name: trayicon-${{ env.VERSION }}-windows-x64.exe
          asset_content_type: application/octet-stream

      - name: Push tag
        run: |
          git tag -a v${{ env.VERSION }} -m "Release v${{ env.VERSION }}"
          git push origin v${{ env.VERSION }}
